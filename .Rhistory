scale_color_manual(values = gene_group_colors) +
ylim(y_lim) +
theme_bw() +
theme(
strip.text = element_text(size = 14, face = "plain"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
legend.position = "right"
)
return(p)
}
logFC_corr_plot <- plot_metric_custom(summary_stats, "log2FC_corr", "Mean log2FC Pearson corr (RÂ²)")
jaccard_plot <- plot_metric_custom(summary_stats, "jaccard", "Mean Jaccard Index")
combined_plot <- (jaccard_plot / logFC_corr_plot) +
plot_annotation(
tag_levels = 'A',
tag_prefix = "",
tag_suffix = "",
theme = theme(
plot.tag = element_text(face = "plain", size = 16, family = "")
)
)
combined_plot
ggsave("plots/figures/sim2_noise_3000genes.png", dpi = 400, width = 14.0, height = 8.0, plot = combined_plot)
simulate_real_data_with_cn_noise <- function(n_samples, n_genes, noise_levels = c(0.05, 0.10, 0.15, 0.20), replicate_id = 1) {
# Load data
rna <- read.csv("TCGA/BRCA/test/rna.csv") %>% remove_rownames() %>% column_to_rownames("X")
cnv <- read.csv("TCGA/BRCA/test/cnv.csv") %>% remove_rownames() %>% column_to_rownames("X")
metadata_full <- read.csv("TCGA/BRCA/test/metadata.csv", row.names = 1)
# Check sample count
total_samples <- 2 * n_samples
if (ncol(rna) < total_samples || ncol(cnv) < total_samples) {
stop("Not enough samples in input RNA or CNV data.")
}
# Assume first half are A, second half are B
condition_A_ids <- colnames(rna)[1:(ncol(rna)/2)]
condition_B_ids <- colnames(rna)[(ncol(rna)/2 + 1):ncol(rna)]
# Sample n patients from available pairs
max_pairs <- min(length(condition_A_ids), length(condition_B_ids))
if (n_samples > max_pairs) stop("Not enough matched samples available.")
idx <- sample(1:max_pairs, n_samples)
sampled_A <- condition_A_ids[idx]
sampled_B <- condition_B_ids[idx]
sample_ids <- c(sampled_A, sampled_B)
# Randomly sample genes
all_genes <- rownames(rna)
if (length(all_genes) < n_genes) stop("Not enough genes available to sample.")
sampled_genes <- sample(all_genes, n_genes)
# Subset RNA and CNV
rna_subset <- rna[sampled_genes, sample_ids]
cnv_subset <- cnv[sampled_genes, sample_ids]
# Build metadata
metadata_full$sampleID <- rownames(metadata_full)
metadata <- metadata_full[sample_ids, ]
metadata <- metadata %>% dplyr::select(condition)
# Normalize CNV
cnv_subset <- cnv_subset * 2
cnv_subset[cnv_subset > 6] <- 6
# Prefix for filenames: replicateID_nSamples_nGenes
prefix <- paste0(replicate_id, "_", n_samples, "_", n_genes)
# === Save clean version (no noise) ===
clean_dir <- file.path("deconveilCaseStudies/simulations/data/simulations_4/", "no_noise")
dir.create(clean_dir, recursive = TRUE, showWarnings = FALSE)
write.csv(rna_subset, file = file.path(clean_dir, paste0(prefix, "_rna.csv")))
write.csv(cnv_subset, file = file.path(clean_dir, paste0(prefix, "_cn.csv")))
write.csv(metadata, file = file.path(clean_dir, paste0(prefix, "_metadata.csv")))
# === Generate noisy versions ===
for (noise_level in noise_levels) {
cn_noisy <- cnv_subset
tumor_cols <- sampled_B
total_elements <- length(tumor_cols) * n_genes
n_noisy <- round(noise_level * total_elements)
row_idx <- sample(1:n_genes, n_noisy, replace = TRUE)
col_idx <- sample(tumor_cols, n_noisy, replace = TRUE)
for (i in seq_len(n_noisy)) {
cn_noisy[row_idx[i], col_idx[i]] <- round(
cn_noisy[row_idx[i], col_idx[i]] + sample(c(-2, -1, 0, 1, 2), 1)
)
}
cn_noisy[cn_noisy < 0] <- 0
cn_noisy[cn_noisy > 6] <- 6
noisy_dir <- file.path(
"deconveilCaseStudies/simulations/data/simulations_4/",
paste0("noise_", sprintf("%02d", noise_level * 100))
)
dir.create(noisy_dir, recursive = TRUE, showWarnings = FALSE)
write.csv(rna_subset, file = file.path(noisy_dir, paste0(prefix, "_rna.csv")))
write.csv(cn_noisy, file = file.path(noisy_dir, paste0(prefix, "_cn.csv")))
write.csv(metadata, file = file.path(noisy_dir, paste0(prefix, "_metadata.csv")))
}
}
for (size in c(10, 20, 40, 60)) {
for (replicate in 1:5) {
simulate_real_data_with_cn_noise(n_samples = size, n_genes = 5000, replicate_id = replicate)
}
}
setwd("/Users/katsiarynadavydzenka/Documents/PhD_AI/")
pkgs <- c("tidyverse")
sapply(pkgs, require, character.only = TRUE)
simulate_real_data_with_cn_noise <- function(n_samples, n_genes, noise_levels = c(0.05, 0.10, 0.15, 0.20), replicate_id = 1) {
# Load data
rna <- read.csv("TCGA/BRCA/test/rna.csv") %>% remove_rownames() %>% column_to_rownames("X")
cnv <- read.csv("TCGA/BRCA/test/cnv.csv") %>% remove_rownames() %>% column_to_rownames("X")
metadata_full <- read.csv("TCGA/BRCA/test/metadata.csv", row.names = 1)
# Check sample count
total_samples <- 2 * n_samples
if (ncol(rna) < total_samples || ncol(cnv) < total_samples) {
stop("Not enough samples in input RNA or CNV data.")
}
# Assume first half are A, second half are B
condition_A_ids <- colnames(rna)[1:(ncol(rna)/2)]
condition_B_ids <- colnames(rna)[(ncol(rna)/2 + 1):ncol(rna)]
# Sample n patients from available pairs
max_pairs <- min(length(condition_A_ids), length(condition_B_ids))
if (n_samples > max_pairs) stop("Not enough matched samples available.")
idx <- sample(1:max_pairs, n_samples)
sampled_A <- condition_A_ids[idx]
sampled_B <- condition_B_ids[idx]
sample_ids <- c(sampled_A, sampled_B)
# Randomly sample genes
all_genes <- rownames(rna)
if (length(all_genes) < n_genes) stop("Not enough genes available to sample.")
sampled_genes <- sample(all_genes, n_genes)
# Subset RNA and CNV
rna_subset <- rna[sampled_genes, sample_ids]
cnv_subset <- cnv[sampled_genes, sample_ids]
# Build metadata
metadata_full$sampleID <- rownames(metadata_full)
metadata <- metadata_full[sample_ids, ]
metadata <- metadata %>% dplyr::select(condition)
# Normalize CNV
cnv_subset <- cnv_subset * 2
cnv_subset[cnv_subset > 6] <- 6
# Prefix for filenames: replicateID_nSamples_nGenes
prefix <- paste0(replicate_id, "_", n_samples, "_", n_genes)
# === Save clean version (no noise) ===
clean_dir <- file.path("deconveilCaseStudies/simulations/data/simulations_4/", "no_noise")
dir.create(clean_dir, recursive = TRUE, showWarnings = FALSE)
write.csv(rna_subset, file = file.path(clean_dir, paste0(prefix, "_rna.csv")))
write.csv(cnv_subset, file = file.path(clean_dir, paste0(prefix, "_cn.csv")))
write.csv(metadata, file = file.path(clean_dir, paste0(prefix, "_metadata.csv")))
# === Generate noisy versions ===
for (noise_level in noise_levels) {
cn_noisy <- cnv_subset
tumor_cols <- sampled_B
total_elements <- length(tumor_cols) * n_genes
n_noisy <- round(noise_level * total_elements)
row_idx <- sample(1:n_genes, n_noisy, replace = TRUE)
col_idx <- sample(tumor_cols, n_noisy, replace = TRUE)
for (i in seq_len(n_noisy)) {
cn_noisy[row_idx[i], col_idx[i]] <- round(
cn_noisy[row_idx[i], col_idx[i]] + sample(c(-2, -1, 0, 1, 2), 1)
)
}
cn_noisy[cn_noisy < 0] <- 0
cn_noisy[cn_noisy > 6] <- 6
noisy_dir <- file.path(
"deconveilCaseStudies/simulations/data/simulations_4/",
paste0("noise_", sprintf("%02d", noise_level * 100))
)
dir.create(noisy_dir, recursive = TRUE, showWarnings = FALSE)
write.csv(rna_subset, file = file.path(noisy_dir, paste0(prefix, "_rna.csv")))
write.csv(cn_noisy, file = file.path(noisy_dir, paste0(prefix, "_cn.csv")))
write.csv(metadata, file = file.path(noisy_dir, paste0(prefix, "_metadata.csv")))
}
}
for (size in c(10, 20, 40, 60)) {
for (replicate in 1:5) {
simulate_real_data_with_cn_noise(n_samples = size, n_genes = 5000, replicate_id = replicate)
}
}
simulate_real_data_with_cn_noise <- function(n_samples, n_genes, noise_levels = c(0.05, 0.10, 0.15, 0.20), replicate_id = 1) {
# Load data
rna <- read.csv("TCGA/BRCA/test/rna.csv") %>% remove_rownames() %>% column_to_rownames("X")
cnv <- read.csv("TCGA/BRCA/test/cnv.csv") %>% remove_rownames() %>% column_to_rownames("X")
metadata_full <- read.csv("TCGA/BRCA/test/metadata.csv", row.names = 1)
# Check sample count
total_samples <- 2 * n_samples
if (ncol(rna) < total_samples || ncol(cnv) < total_samples) {
stop("Not enough samples in input RNA or CNV data.")
}
# Assume first half are A, second half are B
condition_A_ids <- colnames(rna)[1:(ncol(rna)/2)]
condition_B_ids <- colnames(rna)[(ncol(rna)/2 + 1):ncol(rna)]
# Sample n patients from available pairs
max_pairs <- min(length(condition_A_ids), length(condition_B_ids))
if (n_samples > max_pairs) stop("Not enough matched samples available.")
idx <- sample(1:max_pairs, n_samples)
sampled_A <- condition_A_ids[idx]
sampled_B <- condition_B_ids[idx]
sample_ids <- c(sampled_A, sampled_B)
# Randomly sample genes
all_genes <- rownames(rna)
if (length(all_genes) < n_genes) stop("Not enough genes available to sample.")
sampled_genes <- sample(all_genes, n_genes)
# Subset RNA and CNV
rna_subset <- rna[sampled_genes, sample_ids]
cnv_subset <- cnv[sampled_genes, sample_ids]
# Build metadata
metadata_full$sampleID <- rownames(metadata_full)
metadata <- metadata_full[sample_ids, ]
metadata <- metadata %>% dplyr::select(condition)
# Normalize CNV
cnv_subset <- cnv_subset * 2
cnv_subset[cnv_subset > 6] <- 6
# Prefix for filenames: replicateID_nSamples_nGenes
prefix <- paste0(replicate_id, "_", n_samples, "_", n_genes)
# === Save clean version (no noise) ===
clean_dir <- file.path("deconveilCaseStudies/simulations/data/simulations_4/", "no_noise")
dir.create(clean_dir, recursive = TRUE, showWarnings = FALSE)
write.csv(rna_subset, file = file.path(clean_dir, paste0(prefix, "_rna.csv")))
write.csv(cnv_subset, file = file.path(clean_dir, paste0(prefix, "_cn.csv")))
write.csv(metadata, file = file.path(clean_dir, paste0(prefix, "_metadata.csv")))
# === Generate noisy versions ===
for (noise_level in noise_levels) {
cn_noisy <- cnv_subset
tumor_cols <- sampled_B
total_elements <- length(tumor_cols) * n_genes
n_noisy <- round(noise_level * total_elements)
row_idx <- sample(1:n_genes, n_noisy, replace = TRUE)
col_idx <- sample(tumor_cols, n_noisy, replace = TRUE)
for (i in seq_len(n_noisy)) {
cn_noisy[row_idx[i], col_idx[i]] <- round(
cn_noisy[row_idx[i], col_idx[i]] + sample(c(-2, -1, 0, 1, 2), 1)
)
}
cn_noisy[cn_noisy < 0] <- 0
cn_noisy[cn_noisy > 6] <- 6
noisy_dir <- file.path(
"deconveilCaseStudies/simulations/data/simulations_4/",
paste0("noise_", sprintf("%02d", noise_level * 100))
)
dir.create(noisy_dir, recursive = TRUE, showWarnings = FALSE)
write.csv(rna_subset, file = file.path(noisy_dir, paste0(prefix, "_rna.csv")))
write.csv(cn_noisy, file = file.path(noisy_dir, paste0(prefix, "_cn.csv")))
write.csv(metadata, file = file.path(noisy_dir, paste0(prefix, "_metadata.csv")))
}
}
for (size in c(10, 20, 40, 60)) {
for (replicate in 1:5) {
simulate_real_data_with_cn_noise(n_samples = size, n_genes = 5000, replicate_id = replicate)
}
}
setwd("/Users/katsiarynadavydzenka/Documents/PhD_AI/deconveilCaseStudies/")
pkgs <- c("tidyverse", "ggplot2", "ggpubr", "patchwork")
sapply(pkgs, require, character.only = TRUE)
base_path <- "simulations/results/simulation_4"
lfc_cut <- 1.0
pval_cut <- 0.05
noise_levels <- c("no_noise", "noise_5", "noise_10", "noise_15", "noise_20")
sample_sizes <- c(10, 20, 40, 60)
n_genes <- 5000
replicates <- 1:5
get_de_type <- function(logfc, pval, lfc_cut, pval_cut) {
case_when(
pval < pval_cut & logfc > lfc_cut ~ "Up-reg",
pval < pval_cut & logfc < -lfc_cut ~ "Down-reg",
TRUE ~ "n.s."
)
}
load_and_classify <- function(path) {
read.csv(path, row.names = 1) %>%
tibble::rownames_to_column("gene") %>%  # Move rownames to a proper column
mutate(
DEtype = get_de_type(log2FoldChange, padj, lfc_cut, pval_cut)
) %>%
select(gene, log2FoldChange, padj, DEtype)
}
# Process a single configuration
process_one_replicate <- function(noise, replicate, sample_size) {
# Skip clean dataset, it's used as baseline
if (noise == "no_noise") return(NULL)
# File paths
clean_naive_path <- file.path(base_path, "no_noise", "replicates_pydeseq", paste0(replicate, "_res_CNnaive_", sample_size, "_", n_genes, ".csv"))
clean_aware_path <- file.path(base_path, "no_noise", "replicates_deconveil", paste0(replicate, "_res_CNaware_", sample_size, "_", n_genes, ".csv"))
noisy_naive_path <- file.path(base_path, noise, "replicates_pydeseq", paste0(replicate, "_res_CNnaive_", sample_size, "_", n_genes, ".csv"))
noisy_aware_path <- file.path(base_path, noise, "replicates_deconveil", paste0(replicate, "_res_CNaware_", sample_size, "_", n_genes, ".csv"))
if (!file.exists(clean_naive_path) || !file.exists(clean_aware_path) ||
!file.exists(noisy_naive_path) || !file.exists(noisy_aware_path)) {
message("â ï¸ Missing file for replicate ", replicate, " | Noise: ", noise, " | Sample size: ", sample_size)
return(NULL)
}
# Read and annotate data
clean_naive <- read.csv(clean_naive_path, row.names = 1) %>%
rownames_to_column("gene") %>%
mutate(DEtype_clean_naive = get_de_type(log2FoldChange, padj, lfc_cut, pval_cut)) %>%
select(gene, log2FoldChange, padj, DEtype_clean_naive) %>%
rename(logFC_clean_naive = log2FoldChange, pval_clean_naive = padj)
clean_aware <- read.csv(clean_aware_path, row.names = 1) %>%
rownames_to_column("gene") %>%
mutate(DEtype_clean_aware = get_de_type(log2FoldChange, padj, lfc_cut, pval_cut)) %>%
select(gene, log2FoldChange, padj, DEtype_clean_aware) %>%
rename(logFC_clean_aware = log2FoldChange, pval_clean_aware = padj)
noisy_naive <- read.csv(noisy_naive_path, row.names = 1) %>%
rownames_to_column("gene") %>%
mutate(DEtype_noisy_naive = get_de_type(log2FoldChange, padj, lfc_cut, pval_cut)) %>%
select(gene, log2FoldChange, padj, DEtype_noisy_naive) %>%
rename(logFC_noisy_naive = log2FoldChange, pval_noisy_naive = padj)
noisy_aware <- read.csv(noisy_aware_path, row.names = 1) %>%
rownames_to_column("gene") %>%
mutate(DEtype_noisy_aware = get_de_type(log2FoldChange, padj, lfc_cut, pval_cut)) %>%
select(gene, log2FoldChange, padj, DEtype_noisy_aware) %>%
rename(logFC_noisy_aware = log2FoldChange, pval_noisy_aware = padj)
# Merge all results
df <- clean_naive %>%
inner_join(clean_aware, by = "gene") %>%
inner_join(noisy_naive, by = "gene") %>%
inner_join(noisy_aware, by = "gene")
# Classify gene groups
df <- df %>%
mutate(
group_clean = case_when(
DEtype_clean_naive %in% c("Up-reg", "Down-reg") & DEtype_clean_aware == "n.s." ~ "DSG",
DEtype_clean_naive == DEtype_clean_aware & DEtype_clean_naive != "n.s." ~ "DIG",
DEtype_clean_naive == "n.s." & DEtype_clean_aware %in% c("Up-reg", "Down-reg") ~ "DCG",
TRUE ~ "non_DEG"
),
group_noise = case_when(
DEtype_noisy_naive %in% c("Up-reg", "Down-reg") & DEtype_noisy_aware == "n.s." ~ "DSG",
DEtype_noisy_naive == DEtype_noisy_aware & DEtype_noisy_naive != "n.s." ~ "DIG",
DEtype_noisy_naive == "n.s." & DEtype_noisy_aware %in% c("Up-reg", "Down-reg") ~ "DCG",
TRUE ~ "non_DEG"
),
group_changed = group_clean != group_noise
)
# Compute summary stats per group
result <- df %>%
group_by(group_clean) %>%
summarise(
n_clean = n(),
n_noisy = sum(group_clean == group_noise),
n_overlap = sum(group_clean == group_noise & group_clean == cur_group()$group_clean),
n_union = sum(group_clean == cur_group()$group_clean | group_noise == cur_group()$group_clean),
Jaccard_index = n_overlap / n_union,
log2FC_corr = cor(logFC_clean_aware, logFC_noisy_aware, method = "pearson"),
pval_corr = cor(pval_clean_aware, pval_noisy_aware, method = "spearman"),
.groups = "drop"
) %>%
mutate(
noise_level = noise,
replicate = replicate,
sample_size = sample_size
)
return(result)
}
all_results <- purrr::cross_df(list(
noise = noise_levels[noise_levels != "no_noise"],  # exclude clean here
replicate = replicates,
sample_size = sample_sizes
)) %>%
purrr::pmap_dfr(~ process_one_replicate(..1, ..2, ..3))
# Process a single configuration
process_one_replicate <- function(noise, replicate, sample_size) {
# Skip clean dataset, it's used as baseline
if (noise == "no_noise") return(NULL)
# File paths
clean_naive_path <- file.path(base_path, "no_noise", "replicates_pydeseq", paste0(replicate, "_res_CNnaive_", sample_size, "_", n_genes, ".csv"))
clean_aware_path <- file.path(base_path, "no_noise", "replicates_deconveil", paste0(replicate, "_res_CNaware_", sample_size, "_", n_genes, ".csv"))
noisy_naive_path <- file.path(base_path, noise, "replicates_pydeseq", paste0(replicate, "_res_CNnaive_", sample_size, "_", n_genes, ".csv"))
noisy_aware_path <- file.path(base_path, noise, "replicates_deconveil", paste0(replicate, "_res_CNaware_", sample_size, "_", n_genes, ".csv"))
if (!file.exists(clean_naive_path) || !file.exists(clean_aware_path) ||
!file.exists(noisy_naive_path) || !file.exists(noisy_aware_path)) {
message("â ï¸ Missing file for replicate ", replicate, " | Noise: ", noise, " | Sample size: ", sample_size)
return(NULL)
}
# Read and annotate data
clean_naive <- read.csv(clean_naive_path, row.names = 1) %>%
rownames_to_column("gene") %>%
mutate(DEtype_clean_naive = get_de_type(log2FoldChange, padj, lfc_cut, pval_cut)) %>%
select(gene, log2FoldChange, padj, DEtype_clean_naive) %>%
rename(logFC_clean_naive = log2FoldChange, pval_clean_naive = padj)
clean_aware <- read.csv(clean_aware_path, row.names = 1) %>%
rownames_to_column("gene") %>%
mutate(DEtype_clean_aware = get_de_type(log2FoldChange, padj, lfc_cut, pval_cut)) %>%
select(gene, log2FoldChange, padj, DEtype_clean_aware) %>%
rename(logFC_clean_aware = log2FoldChange, pval_clean_aware = padj)
noisy_naive <- read.csv(noisy_naive_path, row.names = 1) %>%
rownames_to_column("gene") %>%
mutate(DEtype_noisy_naive = get_de_type(log2FoldChange, padj, lfc_cut, pval_cut)) %>%
select(gene, log2FoldChange, padj, DEtype_noisy_naive) %>%
rename(logFC_noisy_naive = log2FoldChange, pval_noisy_naive = padj)
noisy_aware <- read.csv(noisy_aware_path, row.names = 1) %>%
rownames_to_column("gene") %>%
mutate(DEtype_noisy_aware = get_de_type(log2FoldChange, padj, lfc_cut, pval_cut)) %>%
select(gene, log2FoldChange, padj, DEtype_noisy_aware) %>%
rename(logFC_noisy_aware = log2FoldChange, pval_noisy_aware = padj)
# Merge all results
df <- clean_naive %>%
inner_join(clean_aware, by = "gene") %>%
inner_join(noisy_naive, by = "gene") %>%
inner_join(noisy_aware, by = "gene")
# Classify gene groups
df <- df %>%
mutate(
group_clean = case_when(
DEtype_clean_naive %in% c("Up-reg", "Down-reg") & DEtype_clean_aware == "n.s." ~ "DSG",
DEtype_clean_naive == DEtype_clean_aware & DEtype_clean_naive != "n.s." ~ "DIG",
DEtype_clean_naive == "n.s." & DEtype_clean_aware %in% c("Up-reg", "Down-reg") ~ "DCG",
TRUE ~ "non_DEG"
),
group_noise = case_when(
DEtype_noisy_naive %in% c("Up-reg", "Down-reg") & DEtype_noisy_aware == "n.s." ~ "DSG",
DEtype_noisy_naive == DEtype_noisy_aware & DEtype_noisy_naive != "n.s." ~ "DIG",
DEtype_noisy_naive == "n.s." & DEtype_noisy_aware %in% c("Up-reg", "Down-reg") ~ "DCG",
TRUE ~ "non_DEG"
),
group_changed = group_clean != group_noise
)
# Compute summary stats per group
result <- df %>%
group_by(group_clean) %>%
summarise(
n_clean = n(),
n_noisy = sum(group_clean == group_noise),
n_overlap = sum(group_clean == group_noise & group_clean == cur_group()$group_clean),
n_union = sum(group_clean == cur_group()$group_clean | group_noise == cur_group()$group_clean),
Jaccard_index = n_overlap / n_union,
log2FC_corr = cor(logFC_clean_aware, logFC_noisy_aware, method = "pearson"),
pval_corr = cor(pval_clean_aware, pval_noisy_aware, method = "spearman"),
.groups = "drop"
) %>%
mutate(
noise_level = noise,
replicate = replicate,
sample_size = sample_size
)
return(result)
}
all_results <- purrr::cross_df(list(
noise = noise_levels[noise_levels != "no_noise"],  # exclude clean here
replicate = replicates,
sample_size = sample_sizes
)) %>%
purrr::pmap_dfr(~ process_one_replicate(..1, ..2, ..3))
summary_stats <- all_results %>%
group_by(noise_level, sample_size, group_clean) %>%
summarise(
mean_n_clean = round(mean(n_clean)),
sd_n_clean = sd(n_clean),
mean_n_noisy = round(mean(n_noisy)),
sd_n_noisy = sd(n_noisy),
mean_jaccard = mean(Jaccard_index),
sd_jaccard = sd(Jaccard_index),
mean_log2FC_corr = mean(log2FC_corr),
sd_log2FC_corr = sd(log2FC_corr),
mean_pval_corr = mean(pval_corr),
sd_pval_corr = sd(pval_corr),
.groups = "drop"
)
summary_stats$noise_level <- factor(
summary_stats$noise_level,
levels = c("noise_5", "noise_10", "noise_15", "noise_20")
)
summary_stats$group_clean <- factor(summary_stats$group_clean, levels = c("DSG", "DCG", "DIG", "non_DEG"))
plot_metric_custom <- function(df,
metric_col,
y_label,
y_lim = c(0, 1),
noise_labels = c("noise_5" = "5", "noise_10" = "10", "noise_15" = "15", "noise_20" = "20"),
sample_labels = c("10" = "# samples 10", "20" = "# samples 20", "40" = "# samples 40", "60" = "# samples 60"),
gene_group_colors = c("DSG" = "#D55E00", "DIG" = "#771C19", "DCG" = "#FFC300", "non_DEG" = "#888888")) {
mean_col <- paste0("mean_", metric_col)
sd_col <- paste0("sd_", metric_col)
# Ensure factor levels are correct
df <- df %>%
mutate(
noise_level = factor(noise_level, levels = names(noise_labels)),
sample_size = factor(sample_size, levels = names(sample_labels)),
group_clean = factor(group_clean, levels = names(gene_group_colors))
)
p <- ggplot(df, aes(x = noise_level, y = .data[[mean_col]], color = group_clean, group = group_clean)) +
geom_line(size = 1.4) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = .data[[mean_col]] - .data[[sd_col]],
ymax = .data[[mean_col]] + .data[[sd_col]]),
width = 0.2, size = 0.6) +
facet_wrap(~ sample_size, nrow = 1, labeller = as_labeller(sample_labels)) +
labs(
title = "",
x = "Noise level, %",
y = y_label,
color = "Gene Group"
) +
scale_x_discrete(labels = noise_labels) +
scale_color_manual(values = gene_group_colors) +
ylim(y_lim) +
theme_bw() +
theme(
strip.text = element_text(size = 14, face = "plain"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
legend.position = "right"
)
return(p)
}
logFC_corr_plot <- plot_metric_custom(summary_stats, "log2FC_corr", "Mean log2FC Pearson corr (RÂ²)")
jaccard_plot <- plot_metric_custom(summary_stats, "jaccard", "Mean Jaccard Index")
combined_plot <- (jaccard_plot / logFC_corr_plot) +
plot_annotation(
tag_levels = 'A',
tag_prefix = "",
tag_suffix = "",
theme = theme(
plot.tag = element_text(face = "plain", size = 16, family = "")
)
)
combined_plot
ggsave("plots/figures/sim2_noise_5000genes.png", dpi = 400, width = 14.0, height = 8.0, plot = combined_plot)

}
predicted_labels <- ifelse(predicted_pvals < threshold, 1, 0)
true_labels <- as.integer(true_labels)
# Only keep valid comparisons
valid_idx <- complete.cases(predicted_labels, true_labels)
predicted_labels <- predicted_labels[valid_idx]
true_labels <- true_labels[valid_idx]
if (length(predicted_labels) < 2) {
warning("Not enough valid data to compute MCC.")
return(NA)
}
TP <- sum(predicted_labels == 1 & true_labels == 1)
TN <- sum(predicted_labels == 0 & true_labels == 0)
FP <- sum(predicted_labels == 1 & true_labels == 0)
FN <- sum(predicted_labels == 0 & true_labels == 1)
numerator <- (TP * TN) - (FP * FN)
denominator <- sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN))
if (denominator == 0 || is.na(denominator)) {
warning(sprintf(
"Degenerate confusion matrix: TP=%d, TN=%d, FP=%d, FN=%d â†’ MCC undefined.",
TP, TN, FP, FN
))
return(NA)
}
return(numerator / denominator)
}
set.seed(123)
de_status <- sample(c(0, 1), 100, replace = TRUE)
padj <- runif(100)
padj[sample(1:100, 10)] <- NA  # inject some NA
compute_mcc(de_status, padj)
print(sprintf("Method: %s, Rep: %d, SampleSize: %d, GeneCount: %d", method, rep, n, g))
print(table(DE_Status = df$DE_status, Predicted_Signif = ifelse(df[[pval_col]] < 0.05, 1, 0), useNA = "ifany"))
print(sum(!is.na(df[[pval_col]])))
mcc_val <- compute_mcc(df$DE_status, df[[pval_col]])
print(mcc_val)
compute_mcc <- function(true_labels, predicted_pvals, threshold = 0.05) {
if (all(is.na(predicted_pvals))) return(NA)
predicted_labels <- ifelse(predicted_pvals < threshold, 1, 0)
true_labels <- as.integer(true_labels)
# Filter out NAs
valid_idx <- complete.cases(predicted_labels, true_labels)
predicted_labels <- predicted_labels[valid_idx]
true_labels <- true_labels[valid_idx]
TP <- sum(predicted_labels == 1 & true_labels == 1)
TN <- sum(predicted_labels == 0 & true_labels == 0)
FP <- sum(predicted_labels == 1 & true_labels == 0)
FN <- sum(predicted_labels == 0 & true_labels == 1)
numerator <- as.numeric((TP * TN) - (FP * FN))  # avoid integer overflow
denom_parts <- as.numeric(c(TP + FP, TP + FN, TN + FP, TN + FN))
# Avoid invalid division
if (any(denom_parts == 0)) return(NA)
denominator <- sqrt(prod(denom_parts))
if (denominator == 0) return(NA)
return(numerator / denominator)
}
mcc_val <- compute_mcc(df$DE_status, df[[pval_col]])
compute_mcc <- function(true_labels, predicted_pvals, threshold = 0.05) {
if (all(is.na(predicted_pvals))) return(NA)
predicted_labels <- ifelse(predicted_pvals < threshold, 1, 0)
true_labels <- as.integer(true_labels)
# Filter out NAs
valid_idx <- complete.cases(predicted_labels, true_labels)
predicted_labels <- predicted_labels[valid_idx]
true_labels <- true_labels[valid_idx]
TP <- sum(predicted_labels == 1 & true_labels == 1)
TN <- sum(predicted_labels == 0 & true_labels == 0)
FP <- sum(predicted_labels == 1 & true_labels == 0)
FN <- sum(predicted_labels == 0 & true_labels == 1)
numerator <- as.numeric((TP * TN) - (FP * FN))  # avoid integer overflow
denom_parts <- as.numeric(c(TP + FP, TP + FN, TN + FP, TN + FN))
# Avoid invalid division
if (any(denom_parts == 0)) return(NA)
denominator <- sqrt(prod(denom_parts))
if (denominator == 0) return(NA)
return(numerator / denominator)
}
all_results <- list()
for (rep in replicates) {
for (n in sample_sizes) {
for (g in gene_counts) {
# Load ground truth
gt_path <- sprintf("simulations/results/simulation_2/replicates_rna_counts_sim/%d_rna_counts_sim_%d_%d_brca.rds", rep, n, g)
ground_truth <- readRDS(gt_path)
# Extract true values
true_logfc <- ground_truth@variable.annotations[["truelog2foldchanges"]]
de_status <- ground_truth@variable.annotations[["differential.expression"]]
gene_ids <- rownames(ground_truth@count.matrix)
# Initialize dataframe
df <- data.frame(
geneID = gene_ids,
true_log2FC = true_logfc,
DE_status = de_status
)
# Load method results
for (method in methods) {
file_prefix <- switch(method,
"deconveil" = "replicates_deconveil",
"pydeseq"   = "replicates_pydeseq"
)
suffix <- if (method == "pydeseq") "CNnaive" else "CNaware"
file_name <- sprintf("simulations/results/simulation_2/%s/%d_res_%s_%d_%d.csv",
file_prefix, rep, suffix, n, g)
if (file.exists(file_name)) {
res <- read.csv(file_name)
df[[paste0(method, "_log2FC")]] <- res$log2FoldChange
# If `padj` exists, use it; otherwise, fall back to `pvalue`
if ("padj" %in% names(res)) {
df[[paste0(method, "_p")]] <- res$padj
} else {
df[[paste0(method, "_p")]] <- NA
}
} else {
warning(sprintf("Missing file: %s", file_name))
df[[paste0(method, "_log2FC")]] <- NA
df[[paste0(method, "_p")]] <- NA
}
}
# Compute metrics
for (method in methods) {
logfc_col <- paste0(method, "_log2FC")
pval_col <- paste0(method, "_p")
if (!all(is.na(df[[logfc_col]]))) {
# Pearson & MSE
metrics <- compute_metrics(df$true_log2FC, df[[logfc_col]], method)
# MCC
if (!all(is.na(df[[pval_col]]))) {
mcc_val <- compute_mcc(df$DE_status, df[[pval_col]])
} else {
mcc_val <- NA
}
metrics$MCC <- mcc_val
metrics$SampleSize <- n
metrics$GeneCount <- g
metrics$Replicate <- rep
all_results[[length(all_results) + 1]] <- metrics
}
}
}
}
}
# Combine all into a single dataframe
results_df <- dplyr::bind_rows(all_results)
View(results_df)
# Boxplot: MCC
ggplot(results_df, aes(x = factor(SampleSize), y = MCC, fill = Method)) +
geom_boxplot() +
labs(
title = "MCC comparison",
x = "# samples",
y = "MCC"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1))+
theme_minimal() +
scale_fill_brewer(palette = "Set2")
summary_df <- results_df %>%
group_by(Method, SampleSize, GeneCount) %>%
summarise(
Pearson_Correlation_Mean = mean(Pearson_Correlation, na.rm = TRUE),
Pearson_Correlation_SD   = sd(Pearson_Correlation, na.rm = TRUE),
MSE_Mean = mean(MSE, na.rm = TRUE),
MSE_SD   = sd(MSE, na.rm = TRUE),
.groups = "drop"
)
View(summary_df)
summary_df <- results_df %>%
group_by(Method, SampleSize, GeneCount) %>%
summarise(
Pearson_Correlation_Mean = mean(Pearson_Correlation, na.rm = TRUE),
Pearson_Correlation_SD   = sd(Pearson_Correlation, na.rm = TRUE),
MSE_Mean = mean(MSE, na.rm = TRUE),
MSE_SD   = sd(MSE, na.rm = TRUE),
MCC_Mean = mean(MCC, na.rm = TRUE),
MCC_SD   = sd(MCC, na.rm = TRUE)
.groups = "drop"
summary_df <- results_df %>%
group_by(Method, SampleSize, GeneCount) %>%
summarise(
Pearson_Correlation_Mean = mean(Pearson_Correlation, na.rm = TRUE),
Pearson_Correlation_SD   = sd(Pearson_Correlation, na.rm = TRUE),
MSE_Mean = mean(MSE, na.rm = TRUE),
MSE_SD   = sd(MSE, na.rm = TRUE),
MCC_Mean = mean(MCC, na.rm = TRUE),
MCC_SD   = sd(MCC, na.rm = TRUE),
.groups = "drop"
)
View(summary_df)
# Boxplot: Pearson Correlation
ggplot(results_df, aes(x = factor(SampleSize), y = Pearson_Correlation, fill = Method)) +
geom_boxplot() +
labs(
title = "Pearson Correlation comparison",
x = "# samples",
y = "Pearson Correlation (R)"
) +
scale_y_continuous(breaks = seq(0.6, 1, by = 0.05)) +
theme_minimal() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))
method_colors <- c("DeConveil" = "#E64B3599", "PyDESeq2" = "#42B540B2")
# Boxplot: Pearson Correlation
ggplot(results_df, aes(x = factor(SampleSize), y = Pearson_Correlation, fill = Method)) +
geom_boxplot() +
labs(
title = "Pearson Correlation comparison",
x = "# samples",
y = "Pearson Correlation (R)"
) +
scale_y_continuous(breaks = seq(0.6, 1, by = 0.05)) +
theme_minimal() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))
method_colors <- c("deconveil" = "#E64B3599", "pydeseq" = "#42B540B2")
# Boxplot: Pearson Correlation
ggplot(results_df, aes(x = factor(SampleSize), y = Pearson_Correlation, fill = Method)) +
geom_boxplot() +
labs(
title = "Pearson Correlation comparison",
x = "# samples",
y = "Pearson Correlation (R)"
) +
scale_y_continuous(breaks = seq(0.6, 1, by = 0.05)) +
theme_minimal() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))
# Boxplot: Pearson Correlation
ggplot(results_df, aes(x = factor(SampleSize), y = Pearson_Correlation, fill = Method)) +
geom_boxplot() +
labs(
title = "Pearson corr (log2FC)",
x = "# samples",
y = "Pearson Correlation (R)"
) +
scale_y_continuous(breaks = seq(0.6, 1, by = 0.05)) +
theme_minimal() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))
# Boxplot: MSE
ggplot(results_df, aes(x = factor(SampleSize), y = MSE, fill = Method)) +
geom_boxplot() +
labs(
title = "MSE comparison",
x = "# samples",
y = "MSE"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_minimal() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))
# Boxplot: MSE
ggplot(results_df, aes(x = factor(SampleSize), y = MSE, fill = Method)) +
geom_boxplot() +
labs(
title = "MSE (log2FC)",
x = "# samples",
y = "MSE"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_minimal() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))
# Boxplot: MSE
ggplot(results_df, aes(x = factor(SampleSize), y = MSE, fill = Method)) +
geom_boxplot() +
labs(
title = "MSE (log2FC)",
x = "# samples",
y = "MSE"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))
# Boxplot: Pearson Correlation
ggplot(results_df, aes(x = factor(SampleSize), y = Pearson_Correlation, fill = Method)) +
geom_boxplot() +
labs(
title = "Pearson corr (log2FC)",
x = "# samples",
y = "Pearson Correlation (R)"
) +
scale_y_continuous(breaks = seq(0.6, 1, by = 0.05)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))
# Boxplot: MCC
ggplot(results_df, aes(x = factor(SampleSize), y = MCC, fill = Method)) +
geom_boxplot() +
labs(
title = "MCC (padj)",
x = "# samples",
y = "MCC"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_minimal() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))
# Boxplot: MCC
ggplot(results_df, aes(x = factor(SampleSize), y = MCC, fill = Method)) +
geom_boxplot() +
labs(
title = "MCC (padj)",
x = "# samples",
y = "MCC"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))
# Boxplot: MCC
ggplot(results_df, aes(x = factor(SampleSize), y = MCC, fill = Method)) +
geom_boxplot() +
labs(
title = "MCC (padj)",
x = "# samples",
y = "MCC"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(plot.title = element_text(hjust = 0.5))
# Boxplot: MCC
ggplot(results_df, aes(x = factor(SampleSize), y = MCC, fill = Method)) +
geom_boxplot() +
labs(
title = "MCC (padj)",
x = "# samples",
y = "MCC"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 14, color = "black"),
axis.text.y = element_text(size = 14, color = "black"),
)
# Boxplot: MCC
ggplot(results_df, aes(x = factor(SampleSize), y = MCC, fill = Method)) +
geom_boxplot() +
labs(
title = "MCC (padj)",
x = "# samples",
y = "MCC"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
)
# Boxplot: MCC
ggplot(results_df, aes(x = factor(SampleSize), y = MCC, fill = Method)) +
geom_boxplot() +
labs(
title = "MCC (padj)",
x = "# samples",
y = "MCC"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
)
# Boxplot: MSE
ggplot(results_df, aes(x = factor(SampleSize), y = MSE, fill = Method)) +
geom_boxplot() +
labs(
title = "MSE (log2FC)",
x = "# samples",
y = "MSE"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
)
# Boxplot: Pearson Correlation
ggplot(results_df, aes(x = factor(SampleSize), y = Pearson_Correlation, fill = Method)) +
geom_boxplot() +
labs(
title = "Pearson corr (log2FC)",
x = "# samples",
y = "Pearson Correlation (R)"
) +
scale_y_continuous(breaks = seq(0.6, 1, by = 0.05)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(plot.title = element_text(hjust = 0.5))
# Boxplot: Pearson Correlation
p1 <- ggplot(results_df, aes(x = factor(SampleSize), y = Pearson_Correlation, fill = Method)) +
geom_boxplot() +
labs(
title = "Pearson corr (log2FC)",
x = "# samples",
y = "Pearson Correlation (R)"
) +
scale_y_continuous(breaks = seq(0.6, 1, by = 0.05)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
)
# Boxplot: MSE
p2 <- ggplot(results_df, aes(x = factor(SampleSize), y = MSE, fill = Method)) +
geom_boxplot() +
labs(
title = "MSE (log2FC)",
x = "# samples",
y = "MSE"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
)
# Boxplot: MCC
p3 <- ggplot(results_df, aes(x = factor(SampleSize), y = MCC, fill = Method)) +
geom_boxplot() +
labs(
title = "MCC (padj)",
x = "# samples",
y = "MCC"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
)
p1 + p2 + p3
# Boxplot: Pearson Correlation
p1 <- ggplot(results_df, aes(x = factor(SampleSize), y = Pearson_Correlation, fill = Method)) +
geom_boxplot() +
labs(
title = "Pearson corr (log2FC)",
x = "# samples",
y = "Pearson Correlation (R)"
) +
scale_y_continuous(breaks = seq(0.6, 1, by = 0.05)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(
legend.position = "",
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
)
# Boxplot: MSE
p2 <- ggplot(results_df, aes(x = factor(SampleSize), y = MSE, fill = Method)) +
geom_boxplot() +
labs(
title = "MSE (log2FC)",
x = "# samples",
y = "MSE"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(
legend.position = "",
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
)
# Boxplot: MCC
p3 <- ggplot(results_df, aes(x = factor(SampleSize), y = MCC, fill = Method)) +
geom_boxplot() +
labs(
title = "MCC (padj)",
x = "# samples",
y = "MCC"
) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_bw() +
scale_fill_manual(values = method_colors, labels = c("DeConveil", "PyDESeq2"))+
theme(
legend.position = "right",
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
)
p1 + p2 + p3
p <- p1 + p2 + p3
p
ggsave("deconveilCaseStudies/plots/main/performance_plot_v3.png", dpi = 400, width = 10.0, height = 5.0, plot = p)
setwd("/Users/katsiarynadavydzenka/Documents/PhD_AI/deconveilCaseStudies/")
ggsave("plots/main/performance_plot_v3.png", dpi = 400, width = 10.0, height = 5.0, plot = p)
ggsave("plots/main/performance_plot_v3.png", dpi = 400, width = 10.0, height = 4.0, plot = p)
ggsave("plots/main/performance_plot_v3.png", dpi = 400, width = 12<.0, height = 4.0, plot = p)
ggsave("plots/main/performance_plot_v3.png", dpi = 400, width = 12.0, height = 4.0, plot = p)
